var searchIndex = {};
searchIndex['rusqlite'] = {"items":[[0,"","rusqlite","Rusqlite is an ergonomic wrapper for using SQLite from Rust. It attempts to expose\nan interface similar to [rust-postgres](https://github.com/sfackler/rust-postgres).",null,null],[3,"SqliteTransaction","","Represents a transaction on a database connection.",null,null],[3,"SqliteError","","Encompasses an error result from a call to the SQLite C API.",null,null],[12,"code","","The error code returned by a SQLite C API call. See [SQLite Result\nCodes](http://www.sqlite.org/rescode.html) for details.",0,null],[12,"message","","The error message provided by [sqlite3_errmsg](http://www.sqlite.org/c3ref/errcode.html),\nif possible, or a generic error message based on `code` otherwise.",0,null],[3,"SqliteConnection","","A connection to a SQLite database.",null,null],[3,"SqliteOpenFlags","","Flags for opening SQLite database connections.\nSee [sqlite3_open_v2](http://www.sqlite.org/c3ref/open.html) for details.",null,null],[3,"SqliteStatement","","A prepared statement.",null,null],[3,"MappedRows","","An iterator over the mapped resulting rows of a query.",null,null],[3,"SqliteRows","","An iterator over the resulting rows of a query.",null,null],[3,"SqliteRow","","A single result row of a query.",null,null],[4,"SqliteTransactionBehavior","","Options for transaction behavior. See [BEGIN\nTRANSACTION](http://www.sqlite.org/lang_transaction.html) for details.",null,null],[13,"SqliteTransactionDeferred","","",1,null],[13,"SqliteTransactionImmediate","","",1,null],[13,"SqliteTransactionExclusive","","",1,null],[0,"types","","Traits dealing with SQLite data types.",null,null],[6,"sqlite3_stmt","rusqlite::types","",null,null],[5,"sqlite3_column_type","","",null,null],[17,"SQLITE_INTEGER","","",null,null],[17,"SQLITE_FLOAT","","",null,null],[17,"SQLITE_TEXT","","",null,null],[17,"SQLITE_BLOB","","",null,null],[17,"SQLITE_NULL","","",null,null],[3,"Null","","Empty struct that can be used to fill in a query parameter as `NULL`.",null,null],[8,"ToSql","","A trait for types that can be converted into SQLite values.",null,null],[10,"bind_parameter","","",2,null],[8,"FromSql","","A trait for types that can be created from a SQLite value.",null,null],[10,"column_result","","",3,null],[11,"column_has_valid_sqlite_type","","FromSql types can implement this method and use sqlite3_column_type to check that\nthe type reported by SQLite matches a type suitable for Self. This method is used\nby `SqliteRow::get_checked` to confirm that the column contains a valid type before\nattempting to retrieve the value.",3,null],[11,"bind_parameter","","",4,null],[11,"bind_parameter","","",5,null],[11,"bind_parameter","collections::string","",6,null],[11,"bind_parameter","collections::vec","",7,null],[11,"bind_parameter","time","",8,null],[11,"bind_parameter","core::option","",9,null],[11,"clone","rusqlite::types","",10,{"inputs":[{"name":"null"}],"output":{"name":"null"}}],[11,"bind_parameter","","",10,null],[11,"column_result","","",4,null],[11,"column_has_valid_sqlite_type","","",4,null],[11,"column_result","","",5,null],[11,"column_has_valid_sqlite_type","","",5,null],[11,"column_result","collections::string","",6,null],[11,"column_has_valid_sqlite_type","","",6,null],[11,"column_result","collections::vec","",7,null],[11,"column_has_valid_sqlite_type","","",7,null],[11,"column_result","time","",8,null],[11,"column_has_valid_sqlite_type","","",8,null],[11,"column_result","core::option","",9,null],[11,"column_has_valid_sqlite_type","","",9,null],[11,"clone","rusqlite","",1,{"inputs":[{"name":"sqlitetransactionbehavior"}],"output":{"name":"sqlitetransactionbehavior"}}],[11,"new","","Begin a new transaction. Cannot be nested; see `savepoint` for nested transactions.",11,{"inputs":[{"name":"sqlitetransaction"},{"name":"sqliteconnection"},{"name":"sqlitetransactionbehavior"}],"output":{"name":"sqliteresult"}}],[11,"savepoint","","Starts a new [savepoint](http://www.sqlite.org/lang_savepoint.html), allowing nested\ntransactions.",11,{"inputs":[{"name":"sqlitetransaction"}],"output":{"name":"sqliteresult"}}],[11,"will_commit","","Returns whether or not the transaction is currently set to commit.",11,{"inputs":[{"name":"sqlitetransaction"}],"output":{"name":"bool"}}],[11,"will_rollback","","Returns whether or not the transaction is currently set to rollback.",11,{"inputs":[{"name":"sqlitetransaction"}],"output":{"name":"bool"}}],[11,"set_commit","","Set the transaction to commit at its completion.",11,{"inputs":[{"name":"sqlitetransaction"}],"output":null}],[11,"set_rollback","","Set the transaction to rollback at its completion.",11,{"inputs":[{"name":"sqlitetransaction"}],"output":null}],[11,"commit","","A convenience method which consumes and commits a transaction.",11,{"inputs":[{"name":"sqlitetransaction"}],"output":{"name":"sqliteresult"}}],[11,"rollback","","A convenience method which consumes and rolls back a transaction.",11,{"inputs":[{"name":"sqlitetransaction"}],"output":{"name":"sqliteresult"}}],[11,"finish","","Consumes the transaction, committing or rolling back according to the current setting\n(see `will_commit`, `will_rollback`).",11,{"inputs":[{"name":"sqlitetransaction"}],"output":{"name":"sqliteresult"}}],[11,"drop","","",11,{"inputs":[{"name":"sqlitetransaction"}],"output":null}],[6,"SqliteResult","","A typedef of the result returned by many methods.",null,null],[17,"SQLITE_OPEN_READ_ONLY","","",null,null],[17,"SQLITE_OPEN_READ_WRITE","","",null,null],[17,"SQLITE_OPEN_CREATE","","",null,null],[17,"SQLITE_OPEN_URI","","",null,null],[17,"SQLITE_OPEN_MEMORY","","",null,null],[17,"SQLITE_OPEN_NO_MUTEX","","",null,null],[17,"SQLITE_OPEN_FULL_MUTEX","","",null,null],[17,"SQLITE_OPEN_SHARED_CACHE","","",null,null],[17,"SQLITE_OPEN_PRIVATE_CACHE","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"sqliteerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"sqliteerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"sqliteerror"}],"output":{"name":"str"}}],[11,"open","","Open a new connection to a SQLite database.",12,{"inputs":[{"name":"sqliteconnection"},{"name":"p"}],"output":{"name":"sqliteresult"}}],[11,"open_in_memory","","Open a new connection to an in-memory SQLite database.",12,{"inputs":[{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[11,"open_with_flags","","Open a new connection to a SQLite database.",12,{"inputs":[{"name":"sqliteconnection"},{"name":"p"},{"name":"sqliteopenflags"}],"output":{"name":"sqliteresult"}}],[11,"open_in_memory_with_flags","","Open a new connection to an in-memory SQLite database.",12,{"inputs":[{"name":"sqliteconnection"},{"name":"sqliteopenflags"}],"output":{"name":"sqliteresult"}}],[11,"transaction","","Begin a new transaction with the default behavior (DEFERRED).",12,{"inputs":[{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[11,"transaction_with_behavior","","Begin a new transaction with a specified behavior.",12,{"inputs":[{"name":"sqliteconnection"},{"name":"sqlitetransactionbehavior"}],"output":{"name":"sqliteresult"}}],[11,"execute_batch","","Convenience method to run multiple SQL statements (that cannot take any parameters).",12,{"inputs":[{"name":"sqliteconnection"},{"name":"str"}],"output":{"name":"sqliteresult"}}],[11,"execute","","Convenience method to prepare and execute a single SQL statement.",12,null],[11,"last_insert_rowid","","Get the SQLite rowid of the most recent successful INSERT.",12,{"inputs":[{"name":"sqliteconnection"}],"output":{"name":"i64"}}],[11,"query_row","","Convenience method to execute a query that is expected to return a single row.",12,null],[11,"query_row_safe","","Convenience method to execute a query that is expected to return a single row.",12,null],[11,"prepare","","Prepare a SQL statement for execution.",12,{"inputs":[{"name":"sqliteconnection"},{"name":"str"}],"output":{"name":"sqliteresult"}}],[11,"close","","Close the SQLite connection.",12,{"inputs":[{"name":"sqliteconnection"}],"output":{"name":"sqliteresult"}}],[11,"fmt","","",12,{"inputs":[{"name":"sqliteconnection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"cmp","","",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[11,"eq","","",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",13,{"inputs":[{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[11,"all","","Returns the set containing all flags.",13,{"inputs":[{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,{"inputs":[{"name":"sqliteopenflags"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"c_int"}],"output":{"name":"sqliteopenflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,{"inputs":[{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",13,{"inputs":[{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":null}],[6,"Output","","",null,null],[11,"bitor","","Returns the union of the two sets of flags.",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[6,"Output","","",null,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[6,"Output","","",null,null],[11,"bitand","","Returns the intersection between the two sets of flags.",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[6,"Output","","",null,null],[11,"sub","","Returns the set difference of the two sets of flags.",13,{"inputs":[{"name":"sqliteopenflags"},{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[6,"Output","","",null,null],[11,"not","","Returns the complement of this set of flags.",13,{"inputs":[{"name":"sqliteopenflags"}],"output":{"name":"sqliteopenflags"}}],[11,"execute","","Execute the prepared statement.",14,null],[11,"query","","Execute the prepared statement, returning an iterator over the resulting rows.",14,null],[11,"query_map","","Executes the prepared statement and maps a function over the resulting\nrows. ",14,null],[11,"finalize","","Consumes the statement.",14,{"inputs":[{"name":"sqlitestatement"}],"output":{"name":"sqliteresult"}}],[11,"fmt","","",14,{"inputs":[{"name":"sqlitestatement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",14,{"inputs":[{"name":"sqlitestatement"}],"output":null}],[6,"Item","","",null,null],[11,"next","","",15,{"inputs":[{"name":"mappedrows"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",16,{"inputs":[{"name":"sqliterows"}],"output":{"name":"option"}}],[11,"get","","Get the value of a particular column of the result row.",17,{"inputs":[{"name":"sqliterow"},{"name":"c_int"}],"output":{"name":"t"}}],[11,"get_checked","","Get the value of a particular column of the result row.",17,{"inputs":[{"name":"sqliterow"},{"name":"c_int"}],"output":{"name":"sqliteresult"}}],[11,"get_opt","","Attempt to get the value of a particular column of the result row.",17,{"inputs":[{"name":"sqliterow"},{"name":"c_int"}],"output":{"name":"sqliteresult"}}]],"paths":[[3,"SqliteError"],[4,"SqliteTransactionBehavior"],[8,"ToSql"],[8,"FromSql"],[6,"c_int"],[6,"c_double"],[3,"String"],[3,"Vec"],[3,"Timespec"],[4,"Option"],[3,"Null"],[3,"SqliteTransaction"],[3,"SqliteConnection"],[3,"SqliteOpenFlags"],[3,"SqliteStatement"],[3,"MappedRows"],[3,"SqliteRows"],[3,"SqliteRow"]]};
initSearch(searchIndex);
